# This is a list of toolchains that are supported on this board.
set_board_info target_install  {avr-unknown-unknown}

# routines needed to communicate with the board.
load_generic_config "sim"

#unset_board_info slow_simulator

proc sim_load {dest prog args} {
    # check whether the file with the avr-executable exists.
    #if ![file exists $prog] then {
    #    perror "$prog does not exist."
    #    return [list "untested" ""]
    #}
    global avrtest_mmcu
    global avrtest_dir

    set xmega_position [string last "xmega" ${avrtest_mmcu} ]
    set tiny_position  [string last "tiny"  ${avrtest_mmcu} ]
    if { $xmega_position != -1 } then {
	set xmega "-xmega"
    } elseif { $tiny_position != -1 } {
	set xmega "-tiny"
    } else {
	set xmega ""
    }

    set avrtest_exe "${avrtest_dir}/avrtest${xmega}"

#warning "${avrtest_exe} -mmcu=${avrtest_mmcu} -no-stdin -m 200000000 $prog"

    #  Disabling stdin will prevent some malfunction programs from
    #  "hanging" because user does not type something.
    set result [exec ${avrtest_exe} -mmcu=${avrtest_mmcu} -no-stdin \
		    -m 200000000 $prog]
#warning ${result}

    # The variable $result now contains the output of the avrtest run.
    # Let's now look for the strings EXIT, ABORTED or TIMEOUT in result.

    set exit_position [string last EXIT $result ]
    if { $exit_position != -1 } then {
	# Try to separate the program's very output as used by dg-output
	# from simulator babbling.
	set end_output [string last "\n\n exit status" $result]
	set prog_output [string range $result 0 ${end_output}]
	return [list "pass" "${prog_output}"]
    }
    set abort_position [string last ABORTED $result ]
    if { $abort_position != -1 } then {
	set toolarge_position [string last "reason: program is too " $result ]
	if {$toolarge_position != -1 } then {
	    # "reason: program is too large (*)"
	    # "reason: program counter (*) out of bounds"
	    return [list "untested" ""]
        }
	return [list "fail" ""]
    }
    return [list "untested" ""]
}

# No default multilib options are needed for this board.
process_multilib_options ""

set_board_info is_simulator 1

# Object format isn't visible in the target triple, so we set it explicitly.
set_board_info obj_format "elf"

# The compiler used to build for this board. This has *nothing* to do
# with what compiler is tested if we're testing gcc.
set_board_info compiler  "[find_gcc]"

if { ![info exists extra_cflags] } {
    set extra_cflags ""
}

if { [info exists avrlibc_include_dir] } {
    set extra_cflags "${extra_cflags} -I${avrlibc_include_dir}"
}

# Some of the IEEE test in the gcc testsuite evaluate the define symbol
# SIGNAL_SUPPRESS in order to find out whether to use signal.h when
# checking compliance of IEEE floating point.  We do not have signal.h
# and, thus, define this symbol.

set_board_info cflags  " -DSIGNAL_SUPPRESS -mmcu=${mmcu} ${extra_cflags}"
set_board_info gcc,stack_size 2048
set_board_info gcc,no_trampolines 1
set_board_info gcc,no_pch_tests 1

# target-supports.exp::check_effective_target_keeps_null_pointer_checks
# states:
#
#   Return 1 if according to target_info struct and explicit target list
#   target disables -fdelete-null-pointer-checks.  Targets should return 0
#   if they simply default to -fno-delete-null-pointer-checks but obey
#   -fdelete-null-pointer-checks when passed explicitly (and tests that
#   depend on this option should do that).
#
# This is the case for avr; hence do *NOT* set the following var to 1.
# set_board_info gcc,keeps_null_pointer_checks 1

# Linking against exit-${mmcu}.o brings in code to setup stdout so that
# printf's output will appear on the host terminal.  Also use a full-fledged
# version of printf so that printing float works as expected.
set_board_info ldflags "${avrtest_dir}/exit-${mmcu}.o -Wl,-u,vfprintf -lprintf_flt ${extra_ldflags} -L${avrtest_dir}"

# Restrict compatibility tests. And optimise to reduce size.
set COMPAT_SKIPS [list {VA} {COMPLEX_INT}]
set COMPAT_OPTIONS [list [list {-Os -mno-interrupts  -mcall-prologues} {-Os -mno-interrupts  -mcall-prologues}]]

# No linker script needed - the simulator is the main environment for this
# target.  Some tests for __flash1 specify their own linker script in
# dg-options, e.g. -Tavr51-flash1.x.  In general, the default is just fine,
# and pretending more memory is achieved by adding some extra_ldflags
# in ${mmcu}-sim.exp.
set_board_info ldscript ""

# Return codes are supported by the simulator.
set_board_info needs_status_wrapper 0
